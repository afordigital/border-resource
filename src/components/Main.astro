---

---

<main id="container">
  <div class="design-tool">
    <img
      src="/public/svgs/sparkles.svg"
      width="16"
      height="16"
      alt="sparkles icon"
    />
    <p class="design-tool-text">Design tool</p>
  </div>
  <hgroup>
    <h1>Perfect Your Layouts with Ease</h1>
    <p class="title-description">
      Discover how padding and border-radius interact in real time with this
      dynamic, hands-on tool.
    </p>
  </hgroup>
  <section class="action-container">
    <div class="content-box">
      <p class="outer-border-text">48px</p>
      <div class="overflow-box">
        <div class="outer-box" style="border-radius:var(--outerBorder)">
          <div class="inner-box" style="var(--innerBorder)">
            <p class="inner-border-text">48px</p>
          </div>
        </div>
      </div>
    </div>
    <div class="sliders">
      <label class="custom-label inputs-wrapper">
        <div class="checkbox-wrapper-46">
          <input type="checkbox" id="cbx-46" class="checkbox inp-cbx" />
          <label for="cbx-46" class="checkbox cbx"
            ><span>
              <svg viewBox="0 0 12 10" height="10px" width="12px">
                <polyline points="1.5 6 4.5 9 10.5 1"></polyline></svg
              ></span
            ><span>Zoom In</span>
          </label>
        </div>
      </label>
      <label class="custom-label">
        <span> Outer border </span>
        <div class="inputs-wrapper">
          <div class="wrapper-range">
            <input
              class="range outerBorder"
              type="range"
              min="0"
              max="100"
              value="48"
            />
          </div>
          <input
            type="number"
            class="inputTextValue"
            id="outerBorderText"
            min="0"
            max="100"
            value="48"
          />
        </div>
      </label>
      <label class="custom-label">
        <span> Padding </span>
        <div class="inputs-wrapper">
          <div class="wrapper-range">
            <input
              class="range padding"
              type="range"
              min="0"
              max="100"
              value="36"
            />
          </div>
          <input
            type="number"
            class="inputTextValue"
            id="paddingText"
            min="0"
            max="100"
            value="36"
          />
        </div>
      </label>
      <label class="custom-label">
        <span> Inner Border </span>
        <div class="inputs-wrapper">
          <div class="wrapper-range">
            <input
              class="range innerBorder"
              type="range"
              min="0"
              max="100"
              value="12"
            />
          </div>
          <input
            type="number"
            class="inputTextValue"
            id="innerBorderText"
            min="0"
            max="100"
            value="12"
          />
        </div>
      </label>
    </div>
  </section>
</main>

<script>
  const sliders = ["outerBorder", "padding", "innerBorder"] as const;
  const checkboxInput = document.querySelector(".checkbox");

  type SliderKey = (typeof sliders)[number];

  type SliderElements = {
    range: HTMLInputElement;
    text: HTMLInputElement;
  };

  const elements: Record<SliderKey, SliderElements> = sliders.reduce(
    (acc, key) => {
      const range = document.querySelector<HTMLInputElement>(`.${key}`);
      const text = document.querySelector<HTMLInputElement>(`#${key}Text`);
      if (range && text) acc[key] = { range, text };
      return acc;
    },
    {} as Record<SliderKey, SliderElements>
  );

  function updateStyles(changed: SliderKey) {
    let outer = parseInt(elements.outerBorder.range.value, 10);
    let padding = parseInt(elements.padding.range.value, 10);
    let inner = parseInt(elements.innerBorder.range.value, 10);

    if (changed === "outerBorder") inner = outer - padding;
    if (changed === "padding") outer = inner + padding;
    if (changed === "innerBorder") outer = padding + inner;

    elements.outerBorder.range.value = outer.toString();
    elements.outerBorder.text.value = outer.toString();
    elements.padding.range.value = padding.toString();
    elements.padding.text.value = padding.toString();
    elements.innerBorder.range.value = inner.toString();
    elements.innerBorder.text.value = inner.toString();

    document.documentElement.style.setProperty("--outerBorder", `${outer}px`);
    document.documentElement.style.setProperty("--padding", `${padding}px`);
    document.documentElement.style.setProperty("--innerBorder", `${inner}px`);
  }

  sliders.forEach((key) => {
    elements[key]?.range.addEventListener("input", () => updateStyles(key));
    elements[key]?.text.addEventListener("input", () => {
      elements[key].range.value = elements[key].text.value;
      updateStyles(key);
    });
  });

  checkboxInput?.addEventListener("change", (event) => {
    const isChecked = (event.target as HTMLInputElement).checked;

    if (isChecked) {
      document.documentElement.style.setProperty("--zoom", "1.5");
    } else {
      document.documentElement.style.setProperty("--zoom", "1");
    }
  });

  function updateTextPosition() {
    const outerBorder = parseInt(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--outerBorder"
      ),
      10
    );
    const innerBorder = parseInt(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--innerBorder"
      ),
      10
    );
    const padding = parseInt(
      getComputedStyle(document.documentElement).getPropertyValue("--padding"),
      10
    );

    if (outerBorder >= 100 && innerBorder >= 40 && padding >= 70) {
      document.documentElement.style.setProperty("--textTop", "50%");
      document.documentElement.style.setProperty("--textLeft", "50%");
      document.documentElement.style.setProperty("--textPadding", "0");
      document.documentElement.style.setProperty(
        "--textTransform",
        "translate(-50%, -50%)"
      );
    } else {
      const topValue = `${innerBorder / 10}px`;
      document.documentElement.style.setProperty("--textTop", topValue);
      document.documentElement.style.setProperty("--textLeft", topValue);
      document.documentElement.style.setProperty("--textPadding", "20px");
      document.documentElement.style.setProperty(
        "--textTransform",
        "translate(0, 0)"
      );
    }
  }

  // Llama a esta función cada vez que cambien los valores
  updateTextPosition();

  // Escucha los cambios en los controles deslizantes
  document.querySelectorAll(".range").forEach((input) => {
    input.addEventListener("input", updateTextPosition);
  });
</script>

<style>
  main {
    min-width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 36px;
    text-align: center;
    padding: 15px;
  }

  .custom-label {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 8px;
  }

  .range {
    width: 400px;
  }

  input[type="range"]::before {
    width: var(--outerBorder);
    filter: blur(8px);
    opacity: 0.8;
  }

  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    cursor: pointer;
    outline: none;
    overflow: hidden;
    border-radius: 15px;
    background-color: rgb(255, 255, 255, 0.5);
  }

  /* Track: webkit browsers */
  input[type="range"]::-webkit-slider-runnable-track {
    padding: 0;
    height: 30px;
    border-radius: 15px;
  }

  /* Track: Mozilla Firefox */
  input[type="range"]::-moz-range-track {
    padding: 0;
    height: 20px;
    border-radius: 15px;
  }

  /* Here the colors of the input rage are edited */

  /* Thumb: webkit */
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    height: 30px;
    width: 30px;
    background: rgba(255, 255, 255);
    border-radius: 50%;
    border: 3px solid rgb(92, 29, 165);
    box-shadow: -407px 0 0 400px rgb(92, 29, 165);
    transform: translateY(-0.2px);
  }

  /* Thumb: Firefox */
  input[type="range"]::-moz-range-thumb {
    appearance: none;
    height: 20px;
    width: 20px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    border: 3px solid rgb(92, 29, 165);
    box-shadow: -407px 0 0 400px rgb(92, 29, 165);
    transform: translateY(-0.2px);
  }

  .design-tool {
    position: relative;
    width: fit-content;
  }

  .design-tool {
    display: flex;
    align-items: center;
    gap: 8px;
    border-radius: 10px;
    width: fit-content;
    height: 36px;
    margin: 100px auto 0;
    border: 2px solid transparent;
    background:
      linear-gradient(to bottom, #281736, #08011f) padding-box,
      linear-gradient(to bottom, #dfd6f0, transparent) border-box;
    padding: 8px 32px;
  }

  .inputs-wrapper {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 4px;
  }

  .action-container {
    display: flex;
    flex-direction: row;
    gap: 25px;
    font-family: "Manrope";
  }

  @media (max-width: 768px) {
    .action-container {
      padding: 0 16px;
      flex-direction: column;
      align-items: center;
    }
  }

  .overflow-box {
    width: 250px;
    height: 250px;
    overflow: hidden;
    z-index: 5;
  }

  .content-box {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
    margin: 10px;
  }

  .outer-border-text {
    font-weight: 700;
    z-index: 10;
    position: absolute;
    left: -40px; /* Ajusta este valor para mover más o menos hacia la izquierda */
  }

  .outer-box {
    width: 250px;
    height: 250px;
    border: var(--padding) solid rgba(248, 245, 253, 0.5);
    border-radius: var(--outerBorder);
    transform: scale(var(--zoom));
    transform-origin: top left;
    transition: transform 0.2s ease-in-out;
  }

  .outer-box::before {
    content: "";
    position: absolute;
    top: calc(var(--padding) * -1);
    left: calc(var(--padding) * -1);
    width: calc(100% - 6px + var(--padding) * 2);
    height: calc(100% - 6px + var(--padding) * 2);
    border-radius: var(--outerBorder);
    border: 6px solid #dfd6f0;
    clip-path: polygon(0 0, 50% 0, 0 50%);
    pointer-events: none;
  }

  .inner-box {
    width: 100%;
    height: 100%;
    background: transparent;
    border-radius: var(--innerBorder);
    position: relative;
  }

  .inner-border-text {
    font-weight: 600;
    display: flex;
    flex-direction: row;
    position: absolute;
    top: var(
      --textTop
    ); /* Usa la variable dinámica para la posición vertical */
    left: var(
      --textLeft
    ); /* Usa la variable dinámica para la posición horizontal */

    margin-top: var(
      --textPadding
    ); /* Usa la variable dinámica para el padding */
    margin-left: var(
      --textPadding
    ); /* Usa la variable dinámica para el padding */
    transform: var(--textTransform); /* Ajusta el centrado */
  }

  .inner-box::before {
    content: "";
    position: absolute;
    top: -2px;
    left: -2px;
    width: 100%;
    height: 100%;
    border-radius: var(--innerBorder);
    border: 6px solid #dfd6f0;
    clip-path: polygon(0 0, 50% 0, 0 50%);
    pointer-events: none;
  }

  .inputTextValue {
    all: unset;
    font-weight: 700;
  }

  .sliders {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  hgroup {
    max-width: 800px;
    display: flex;
    flex-direction: column;
    gap: 16px;
    align-items: center;
  }

  h1 {
    font-size: 72px;
    line-height: 1.2;
    font-weight: bold;
    font-family: "Aeonik", sans-serif;
  }

  .design-tool-text {
    color: #dfd6f0;
  }

  .title-description {
    color: #cfcfcf;
    font-size: 18px;
    max-width: 50ch;
    line-height: 1.4;
    font-family: "Manrope", sans-serif;
  }

  /* From Uiverse.io by vishnupprajapat */
  .checkbox-wrapper-46 input[type="checkbox"] {
    display: none;
    visibility: hidden;
  }

  .checkbox-wrapper-46 .cbx {
    margin: auto;
    -webkit-user-select: none;
    user-select: none;
    cursor: pointer;
  }
  .checkbox-wrapper-46 .cbx span {
    display: inline-block;
    vertical-align: middle;
    transform: translate3d(0, 0, 0);
  }
  .checkbox-wrapper-46 .cbx span:first-child {
    position: relative;
    width: 18px;
    height: 18px;
    border-radius: 3px;
    transform: scale(1);
    vertical-align: middle;
    border: 1px solid #9098a9;
    transition: all 0.2s ease;
  }
  .checkbox-wrapper-46 .cbx span:first-child svg {
    position: absolute;
    top: 3px;
    left: 2px;
    fill: none;
    stroke: #ffffff;
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 16px;
    stroke-dashoffset: 16px;
    transition: all 0.3s ease;
    transition-delay: 0.1s;
    transform: translate3d(0, 0, 0);
  }
  .checkbox-wrapper-46 .cbx span:first-child:before {
    content: "";
    width: 100%;
    height: 100%;
    background: #dfd6f0;
    display: block;
    transform: scale(0);
    opacity: 1;
    border-radius: 50%;
  }
  .checkbox-wrapper-46 .cbx span:last-child {
    padding-left: 8px;
  }
  .checkbox-wrapper-46 .cbx:hover span:first-child {
    border-color: #dfd6f0;
  }

  .checkbox-wrapper-46 .inp-cbx:checked + .cbx span:first-child {
    background: #4e0bc9;
    border-color: #dfd6f0;
    animation: wave-46 0.4s ease;
  }
  .checkbox-wrapper-46 .inp-cbx:checked + .cbx span:first-child svg {
    stroke-dashoffset: 0;
  }
  .checkbox-wrapper-46 .inp-cbx:checked + .cbx span:first-child:before {
    transform: scale(3.5);
    opacity: 0;
    transition: all 0.6s ease;
  }

  @keyframes wave-46 {
    50% {
      transform: scale(0.9);
    }
  }
</style>
